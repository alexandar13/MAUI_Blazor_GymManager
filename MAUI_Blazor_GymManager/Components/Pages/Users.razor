@page "/users"
@using Clients
@inject IUsersApi UsersApi

<h3>Korisnici</h3>

@if (users == null)
{
    <p>Učitavanje...</p>
}
else
{
    <div class="user-list">
        @foreach (var user in users)
        {
            <div class="user-item">
                <img class="avatar" src="@GetImage(user.Picture)" />
                <div class="user-info">
                    <strong>@user.FirstName @user.LastName</strong>
                    @* <div>@user.Mail</div> *@
                    <div>@user.Username</div>
                </div>
                <button class="delete-btn" @onclick="() => DeleteUser(user.Id)">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        }
    </div>
}

@code {
    private List<GetUserResponse>? users;

    protected override async Task OnInitializedAsync()
    {
        var response = await UsersApi.GetAllUsers();
        users = response.Data.ToList();
    }

    private string GetImage(byte[] imageBytes)
    {
        if (imageBytes == null || imageBytes.Length == 0)
            return "_content/yourplaceholder.png"; // fallback image

        return $"data:image/png;base64,{Convert.ToBase64String(imageBytes)}";
    }

    private async Task DeleteUser(Guid id)
    {
        await UsersApi.DeleteUser(id); //← implementacija po potrebi
        users = users.Where(u => u.Id != id).ToList();
    }
}